from django.shortcuts import render
from django.http import HttpResponse
from .models import Book,Student,IssueBook,Registers

from django.contrib.auth.models import User
from django.contrib.auth import authenticate,login as dj_login,logout as dj_logout
from django.contrib.auth.decorators import login_required

from django.core.mail import send_mail
# Create your views here.

def home(request):
	return render(request,"home.html")

# @login_required()
# def home1(request):
# 	return render(request,"home1.html")

def clientBookSearches(request):
	if request.method=="POST":
		book_id=request.POST['booksearch']
		if Book.objects.filter(bookid=book_id).exists():
			book=Book.objects.get(bookid=book_id)
			return render(request,"clientBookSearches.html",{'book':book})
		else:
			msg="Book Not Found"
			return render(request,"clientBookSearches.html",{'msg':msg})
	else:
		books=Book.objects.all()
		return render(request,"clientBookSearches.html",{'books':books})
	return render(request,"clientBookSearches.html")
@login_required()
def book(request):
	return render(request,"book.html")

@login_required()
def bookSearch(request):
	if request.method=="POST":
		bookId=request.POST['booksearch']
		if Book.objects.filter(bookid=bookId).exists():
			book=Book.objects.get(bookid=bookId)
			context={"book":book}
			return render(request,"bookSearch.html",context)
		else:
			msg="No Book Available :( "
			return render(request,"bookSearch.html",{'msg':msg})
	else:
		book=Book.objects.all()
		context={"books":book}
		return render(request,"bookSearch.html",context)
	return render(request,"bookSearch.html")



@login_required()
def addBook(request):
	if request.method=="POST":
		if Book.objects.filter(bookid=request.POST['book_id']).exists():
			msg="Book is Already Available :)"
			return render(request,"addBook.html",{'msgBook':msg,'color':'warning'})
		else:
			book=Book(bookid=request.POST['book_id'],name=request.POST['name'],authorname=request.POST['authorname'],dept=request.POST['branch'],edition=request.POST['edition'],publisher=request.POST['publisher'],quantity=request.POST['quantity'])
			book.save()
			msg="Book Added Successfully"
			return render(request,"addBook.html",{'msg':msg,'color':'info'})
	else:
		msg="Book Not Added,Try Again ..!"
		return render(request,"addBook.html",{'msg':msg,'color':'danger'})
	return render(request,"addBook.html",{'color':'info'})

@login_required()
def issueBook(request):
	return render(request,"issuebook.html")

@login_required()
def viewIssueBook(request):
	issueBooks=IssueBook.objects.all()
	return render(request,"viewIssueBook.html",{'issueBooks':issueBooks})

@login_required()
def addStudent(request):
	if request.method=="POST":
		if Student.objects.filter(rollno=request.POST['rollno']).exists():
			msg="Already Student Exists :)"
			return render(request,"addStudent.html",{'msg':msg})
		else:
			student=Student(firstname=request.POST['firstname'],lastname=request.POST['lastname'],rollno=request.POST['rollno'],fathername=request.POST['fathername'],gender=request.POST['gender'],mobileno=request.POST['mobileno'],emailId=request.POST['emailId'])
			student.save()
			msg="Save Successfully"
			return render(request,"addStudent.html",{'msg':msg})
	return render(request,"addStudent.html")

@login_required()
def warningMails(request):
	if request.method=="POST":
		date=request.POST['warn']
		
		if IssueBook.objects.filter(mailed_Date=date).exists():
			issueBook=IssueBook.objects.filter(mailed_Date=date).filter(status=1)
			for ibook in issueBook:
				print(ibook.id,ibook.student_id,ibook.book_id,ibook.mailed_Date)
				mailStudent=Student.objects.get(id=ibook.student_id)
				mail=mailStudent.emailId

				fromMail="alex.apssdc@gmail.com"
				subject="Warning From Library"
				body="You Barrowed Books from Library and Date of Expire @: "+str(ibook.expired)+", Return Books to Avoid Fine. This Mail is Generated By System, Don't Reply. :)"
				send_mail(subject,body,fromMail,[mail],fail_silently=False)
			msg="Warning Mails Sent to Students ..."
			glphy="glyphicon glyphicon-ok"
			return render(request,"warningMails.html",{'msg':msg,'color':'info','glphy':glphy})				
		else:
			msg="No Data Found"
			return render(request,"warningMails.html",{'msg':msg,'color':'danger'})
	else:
		msg="Data Not Exists"
		return render(request,"warningMails.html",{'msg':msg,'color':'danger'})
	return render(request,"warningMails.html")

@login_required()
def viewWarningMails(request):
	if IssueBook.objects.filter(status=1).exists():
		issue=IssueBook.objects.filter(status=1)
		return render(request,"warningMails.html",{'issued':issue})	
	else:
		msg="No Data Found"
	return render(request,"warningMails.html",{'msg':msg})

@login_required()
def issueNewBook(request):
	if request.method=="POST":
		rollno=request.POST['rollno']
		bookid=request.POST['book_id']
		issue=request.POST['issue']
		mailId=request.POST['mailDate']
		expire=request.POST['expire']
		status=request.POST['status']

		if Student.objects.filter(rollno=rollno).exists():
			student=Student.objects.get(rollno=rollno)
			student_id=student.id

			if Book.objects.filter(bookid=bookid).exists():
				book=Book.objects.get(bookid=bookid)
				booksid=book.id
				bookQuantity=book.quantity
				if bookQuantity>0:
					quantity=bookQuantity-1
					ubook=Book.objects.filter(bookid=bookid).update(quantity=quantity)
					# print("---------------------",quantity)
					# print('--------------------',student_id)
					# print("--------------------",booksid)
					issueBook=IssueBook(student_id=student_id,book_id=booksid,issue_date=issue,mailed_Date=mailId,expired=expire,status=status)
					issueBook.save()

					mail=student.emailId
					print(mail)
					fromMail="alex.apssdc@gmail.com"
					subject="Notification From Library"
					body="You Barrowed Books from Library on "+issue+", and the Book :  "+book.name+"  Expired Date is :"+expire+". System Generated Mail, Don't Reply. :)"
					send_mail(subject,body,fromMail,[mail],fail_silently=False)
					msg="Book Issued :) "
					return render(request,"issuebook.html",{'Success':msg})					
				else:
					msg="Your Request for \'"+book.name+"\' No Books Available in Library."
					return render(request,"issuebook.html",{'dataMsg':msg})
			else:
				msg="Book Not Found, Check Your Self :("
				print("--------------------",msg)
				return render(request,"issuebook.html",{'dataMsg':msg})
		else:
			msg="Student Not Found, Check Your Self :("
			print("--------------------",msg)
			return render(request,"issuebook.html",{'dataMsg':msg})		
	else:
		return render(request,"issuebook.html")
	return render(request,"issuebook.html")


@login_required()
def StudentIssuedBook(request):
	try:	
		roll=request.POST['student']
		if Student.objects.filter(rollno=roll).exists():
			student=Student.objects.get(rollno=roll)

			ids=student.id
			issued=IssueBook.objects.filter(student_id=ids)
			#issued.
			return render(request,"studentView.html",{'issued':issued})
		else:
			msg="No Student Exists"
			return render(request,"studentView.html",{'msg':msg})
	except Student.DoesNotExist:
		msg="No Student Exists"
		return render(request,"studentView.html",{'msg':msg})

@login_required()
def returnBook(request):
	sl=request.POST.getlist('issue')
	bl=request.POST.getlist('bookId')

	for s in range(0,len(sl)):
		if sl[s]=="on":
			x=0
			issued=IssueBook.objects.filter(book_id=bl[s]).update(status=x)
			book=Book.objects.get(id=bl[s])
			book.quantity+=1
			book.save()
			msg="Books Returned"
		else:
			msg="One Book Returend"
	return render(request,"issuebook.html",{'msg':msg})



def signup(request):
	if request.method=="POST":
		username=request.POST.get('rollno').strip()
		password1=request.POST.get('password')
		password2=request.POST.get('pwd1')
		email=request.POST.get('emailId')
		if(username!=""):
			if(password1==password2):
				register=Registers(rollno=request.POST['rollno'],name=request.POST['names'],gender=request.POST['gender'],mobile=request.POST['mobileno'],email=request.POST['emailId'],password=request.POST['password'])
				register.save()
				user=User.objects.create_user(username,email,password1)
				if user is not None:
					msg="Successfully User Added"
				else:
					msg="Not Added"
			else:
				print("NotMatch")
				msg="Passwords Do not Match"
				return render(request,'signup.html',{'msg':msg})
		else:
			msg="Username Can't be Null"
		return render(request,"signup.html",{'msg':msg})
	else:
		msgs="Successfully"
		return render(request,"signup.html",{'msgs':msgs})
	return render(request,"signup.html")
	
def login(request):
	if request.user.is_authenticated:
		msg="User "+request.user.username+" is already Logged in State"
		return render(request,"msg.html",{'msg':msg})

	if request.method=='POST':
		uname=request.POST.get('username')
		pword=request.POST.get('password')
		if uname=="library" or uname=="admin":
			user=authenticate(username=uname,password=pword)
			if user is None:
				msg="Login Fail"		
			else:
				msg="Successful"
				dj_login(request,user)
				request.session['username']=uname
				return render(request,"book.html")
				# refurl=request.GET.get('next')
				# if refurl is not None:
				# 	return redirect(refurl)
			return render(request,"msg.html",{'msg':msg})
		else:
			msg="You Don't Have Permission"
			return render(request,"msg.html",{'msg':msg})
	else:
		msg=""
		return render(request,"login.html",{'msg':msg})
	return render(request,"login.html")


def logout(request):
	if request.user.is_authenticated:
		dj_logout(request)		
		#request.session['username']
		msg="User "+request.user.username+" Successfully Logged Out"
		#del request.session["username"]
		return render(request,"login.html",{"msg":msg})
	else:
		msg="No User @ Present"
	return render(request,'msg.html',{'msg':msg})



	# for b in range(0,len(bl)):
	# if sl[0]=="on":
	# 	x=0
	# 	issued=IssueBook.objects.filter(book_id=bl[0]).update(status=x)
	# 	msg="Success"
	# 	if sl[1]==None:
	# 		msg="One Book Returend"
	# 	elif sl[1]==None:
	# 		y=0
	# 		issued=IssueBook.objects.filter(book_id=bl[1]).update(status=y)
	# 		msg="Success"			
	# else:
	# 	msg="Not Success"
	#return HttpResponse(msg)








































	# if sl[s]=="on":
	# 		z=0
	# 		ids=bl[s]
	# 		issued=IssueBook.objects.filter(book_id=ids).update(status=z)
	# 	else:
	# 		msg="Didn't Retured Book"




		# 	if bl[b]:
		# 	z=0
		# 	ids=bl[b]
		# 	if sl[0]=="on":
		# 		issued=IssueBook.objects.filter(book_id=ids).update(status=z)
		# else:
		# 	msg="Didn't Retured Book"